#!/bin/sh

# Simple timing test for the MPI library.  Basically, we use prime
# generation as a timing test, since it exercises most of the pathways
# of the library fairly heavily.  The 'primegen' tool outputs a line
# summarizing timing results.  We gather these and process them for
# statistical information, which is collected into a file.

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Avoid using built-in shell echoes
ECHO=/bin/echo
MAKE=gmake
PERL=perl

# Use a fixed seed so timings will be more consistent
# This one is the 11th-18th decimal digits of 'e'
#export SEED=45904523
SEED=45904523; export SEED

#------------------------------------------------------------------------

$ECHO "\n** Running timing tests for MPI library\n"

$ECHO "Bringing 'metime' up to date ... "
if $MAKE metime ; then
    :
else 
    $ECHO "\nMake failed to build metime.\n"
    exit 1
fi

if [ ! -x ./metime ] ; then 
    $ECHO "\nCannot find 'metime' program, testing cannot continue.\n"
    exit 1
fi

#------------------------------------------------------------------------

$ECHO "Bringing 'primegen' up to date ... "
if $MAKE primegen ; then
    :
else
    $ECHO "\nMake failed to build primegen.\n"
    exit 1
fi

if [ ! -x ./primegen ] ; then
    $ECHO "\nCannot find 'primegen' program, testing cannot continue.\n"
    exit 1
fi

#------------------------------------------------------------------------

rm -f timing-results.txt
touch timing-results.txt

sizes="256 512 1024 2048"
ntests=10

trap 'echo "oop!";rm -f tt*.tmp timing-results.txt;exit 0' INT HUP

$ECHO "\n-- Modular exponentiation\n"
$ECHO "Modular exponentiation:" >> timing-results.txt

$ECHO "Running $ntests modular exponentiations per test:"
for size in $sizes ; do
    $ECHO "- Gathering statistics for $size bits ... "
    secs=`./metime $ntests $size | tail -1 | awk '{print $2}'`
    $ECHO "$size: " $secs " seconds per op" >> timing-results.txt
    tail -1 timing-results.txt
done

$ECHO "<done>";

sizes="256 512 1024"
ntests=1

$ECHO "\n-- Prime generation\n"
$ECHO "Prime generation:" >> timing-results.txt

$ECHO "Generating $ntests prime values per test:"
for size in $sizes ; do
    $ECHO "- Gathering statistics for $size bits ... "
    ./primegen $size $ntests | grep ticks | awk '{print $7}' | tr -d '(' > tt$$.tmp
    $ECHO "$size:" >> timing-results.txt
    $PERL stats tt$$.tmp >> timing-results.txt
    tail -1 timing-results.txt
    rm -f tt$$.tmp
done

$ECHO "<done>"

trap 'rm -f tt*.tmp timing-results.txt' INT HUP

exit 0

